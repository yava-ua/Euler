package yava.euler;

import java.time.Duration;
import java.time.Instant;

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

76576500
 */
public class Euler_12 {
    private static int max = 500;

    public static void main(String[] args) throws InterruptedException {
        Instant start = Instant.now();
        int triangleNumber = 0;
        for (int divisorsQuantity = 1,
                     i = 0;
             divisorsQuantity <= max;
             i++,
                     triangleNumber += i,
                     divisorsQuantity = getDivisorQuantity(triangleNumber)) {

        }
        System.out.println("Triangle number that has more than " + max + " divisors: " + triangleNumber);
        Instant end = Instant.now();
        System.out.println("Execution time: " + Duration.between(start, end));
    }

    public static int getDivisorQuantity(int triangleNumber) {
        int quantity = 0;
        for (int i = 1; i <= triangleNumber / 2; i++) {
            if (triangleNumber % i == 0) {
                quantity++;
            }
        }
        return quantity + 1;
    }

/*
    private static int dividableByNumber(int number, int dividor) {
        if (number % dividor == 0) {
            int quantity = 1;
            do {
                quantity++;
                number /= dividor;
            } while (number % dividor == 0);
            return quantity;
        } else {
            return 0;
        }
    }

    public static int getDivisorQuantity(int number) {
        if (number == 1) {
            return 1;
        }
        if (number <= 3) {
            return dividableByNumber(number, number) + 1;
        }
        int result = 1;
        int factors = dividableByNumber(number, 2);
        result = (factors > 0) ? result*factors : result;
        number = (factors > 0) ? number / factors : number;

        factors = dividableByNumber(number, 3);
        result = (factors > 0) ? result*factors : result;
        number = (factors > 0) ? number / factors : number;

        for (int i = 2; i * i <= number; i += 6) {
            if (number % i == 0) {
                factors = dividableByNumber(number, i);
                result = (factors > 0) ? result*factors : result;
                number = (factors > 0) ? number / factors : number;
            }
            if (number % (i + 2) == 0) {
                factors = dividableByNumber(number, i+3);
                result = (factors > 0) ? result*factors : result;
                number = (factors > 0) ? number / factors : number;
            }
        }
        return number;
    }
*/

}